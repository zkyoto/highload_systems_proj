name: Build and Test Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Images and Tags
        id: vars
        run: |
          echo "IMAGE_TAG=${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "::set-output name=image_tag::${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}"
          images=("api-gateway" "authorizator" "passport" "interviewing-service/candidates" "interviewing-service/feedbacks" "interviewing-service/interviews" "interviewing-service/interviewers" "interviewing-service/interview-results")
          echo "IMAGES=${images[*]}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io

      - name: Build and push Docker images
        run: |
          docker build -t kyoto67/highload/base:${{ env.IMAGE_TAG }} .

          IFS=' ' read -r -a images <<< "${IMAGES}"

          for image in "${images[@]}"; do
            echo "Building and pushing image: $image with tag: ${{ env.IMAGE_TAG }}"
            docker build --build-arg BASE_IMAGE_VERSION=${{ env.IMAGE_TAG }} -t ghcr.io/kyoto67/highload/$image:${{ env.IMAGE_TAG }} ./apps/$image
            docker push ghcr.io/kyoto67/highload/$image:${{ env.IMAGE_TAG }}
          done

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Use Docker tag from build
        run: echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io

      - name: Set up Docker tags
        id: vars
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Run Dockerized tests
        run: |
          mkdir -p coverage
          IFS=' ' read -r -a images <<< "${IMAGES}"
      
          for image in "${images[@]}"; do
            echo "Testing image: $image"
            docker run --rm -v $image:/app/apps/$image/target ghcr.io/kyoto67/highload/$image:${{ env.IMAGE_TAG }} ./mvnw test
            cp -r $image/site/jacoco/ coverage/$image
            ls -lR coverage
          done

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-coverage-report
          path: coverage